package demo.turbo.greendaodemo.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "TABLE1".
*/
public class table1Dao extends AbstractDao<table1, Integer> {

    public static final String TABLENAME = "TABLE1";

    /**
     * Properties of entity table1.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property _id = new Property(0, int.class, "_id", true, "_ID");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property Address = new Property(2, String.class, "address", false, "ADDRESS");
    };


    public table1Dao(DaoConfig config) {
        super(config);
    }
    
    public table1Dao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"TABLE1\" (" + //
                "\"_ID\" INTEGER PRIMARY KEY NOT NULL ," + // 0: _id
                "\"NAME\" TEXT NOT NULL ," + // 1: name
                "\"ADDRESS\" TEXT NOT NULL );"); // 2: address
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"TABLE1\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, table1 entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.get_id());
        stmt.bindString(2, entity.getName());
        stmt.bindString(3, entity.getAddress());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, table1 entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.get_id());
        stmt.bindString(2, entity.getName());
        stmt.bindString(3, entity.getAddress());
    }

    @Override
    public Integer readKey(Cursor cursor, int offset) {
        return cursor.getInt(offset + 0);
    }    

    @Override
    public table1 readEntity(Cursor cursor, int offset) {
        table1 entity = new table1( //
            cursor.getInt(offset + 0), // _id
            cursor.getString(offset + 1), // name
            cursor.getString(offset + 2) // address
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, table1 entity, int offset) {
        entity.set_id(cursor.getInt(offset + 0));
        entity.setName(cursor.getString(offset + 1));
        entity.setAddress(cursor.getString(offset + 2));
     }
    
    @Override
    protected final Integer updateKeyAfterInsert(table1 entity, long rowId) {
        return entity.get_id();
    }
    
    @Override
    public Integer getKey(table1 entity) {
        if(entity != null) {
            return entity.get_id();
        } else {
            return null;
        }
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
